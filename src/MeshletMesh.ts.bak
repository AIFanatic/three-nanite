import { BufferGeometry, Color, DoubleSide, Float32BufferAttribute, Material, Mesh, MeshBasicMaterial, Scene, ShaderMaterial, Vector2, Vector3 } from "three";
import { mergeVertices } from "three/examples/jsm/utils/BufferGeometryUtils.js";
import { MeshletBuilder, meshopt_Meshlet } from "./MeshletBuilder";

import MeshletVertexShader from './shaders/meshlet.vert.glsl';
import MeshletFragmentShader from './shaders/meshlet.frag.glsl';
import { Utils } from "./Utils";

interface Meshlet {
    parent: number;
    meshlets: meshopt_Meshlet[];
}

export class MeshletMesh extends Mesh {
    private meshlets: meshopt_Meshlet[];
    
    constructor(geometry: BufferGeometry, material: Material, maxTriangles: number) {
        // To non indexed
        const nonIndexedGeometry = geometry.clone().toNonIndexed();
        // Generates indices
        const mergedGeometry = mergeVertices(nonIndexedGeometry);

        super(mergedGeometry, material);
        
        this.meshlets = [];
        const indices = new Uint16Array(mergedGeometry.getIndex().array);
        const vertices = mergedGeometry.getAttribute("position").array;
        const triangleCount = vertices.length / 9;
        const maxVertices = vertices.length;

        MeshletBuilder.meshopt_buildMeshletsScan(
            this.meshlets,
            indices,
            indices.length,
            vertices.length,
            maxVertices,
            maxTriangles
        );

        console.log(this.meshlets)
    }

    private AddMeshFromVerticesAndColorsCustom(scene: Scene, vertices: number[], colors: number[], groups: number[]) {
        console.log(groups)
        const triangleGeometry = new BufferGeometry();
        triangleGeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
        triangleGeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
        triangleGeometry.setAttribute( 'group', new Float32BufferAttribute( groups, 1 ) );
        
        const triangleMaterial = new ShaderMaterial({
            vertexColors: true,
            vertexShader: MeshletVertexShader,
            fragmentShader: MeshletFragmentShader,
            side: DoubleSide
        });
    
        const mesh = new Mesh( triangleGeometry, triangleMaterial );
        scene.add(mesh)
    }

    public ShowMeshlets(scene: Scene) {
        const positions = this.geometry.getAttribute("position").array;

        console.log(positions)

        let verticesTriangles = [];
        let verticesColors = [];
        let verticesGroups = [];

        let meshletIndex = 0;
        for (let meshlet of this.meshlets) {
            const color = "#" + Utils.SimpleHash(`${meshletIndex}432t34f4${meshletIndex}${meshletIndex}`);
            const colorr = new Color(color);

            for (let triangleIndices of meshlet.indices) {
                console.log(triangleIndices)
                
                const aI = triangleIndices[0];
                const bI = triangleIndices[1];
                const cI = triangleIndices[2];

                const aVI = meshlet.vertices[aI];
                const bVI = meshlet.vertices[bI];
                const cVI = meshlet.vertices[cI];

                const a = new Vector3(positions[aVI * 3 + 0], positions[aVI * 3 + 1], positions[aVI * 3 + 2]);
                const b = new Vector3(positions[bVI * 3 + 0], positions[bVI * 3 + 1], positions[bVI * 3 + 2]);
                const c = new Vector3(positions[cVI * 3 + 0], positions[cVI * 3 + 1], positions[cVI * 3 + 2]);

                // console.log(a,b,c)
                
                verticesTriangles.push(a.x, a.y, a.z);
                verticesTriangles.push(b.x, b.y, b.z);
                verticesTriangles.push(c.x, c.y, c.z);

                verticesColors.push(colorr.r, colorr.g, colorr.b);
                verticesColors.push(colorr.r, colorr.g, colorr.b);
                verticesColors.push(colorr.r, colorr.g, colorr.b);

                verticesGroups.push(meshletIndex);
                verticesGroups.push(meshletIndex);
                verticesGroups.push(meshletIndex);
            }
            meshletIndex++;
        }

        console.log(verticesTriangles)

        this.AddMeshFromVerticesAndColorsCustom(scene, verticesTriangles, verticesColors, verticesGroups);
    }

    private GetMeshFromVerticesAndIndices(vertexBuffer: number[], indicesBuffer: number[], color: Color): Mesh {
        const geometry = new BufferGeometry();
        geometry.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );
        geometry.setIndex(indicesBuffer);
        const material = new ShaderMaterial({
            // vertexColors: true,
            vertexShader: MeshletVertexShader,
            fragmentShader: MeshletFragmentShader,
            side: DoubleSide,
            uniforms: {
                color: {value: color}
            }
        });
        // const material = new MeshBasicMaterial({color: "green"});
    
        const mesh = new Mesh(geometry, material);
        return mesh;
    }
    
    public GetMeshlet(index: number): Mesh {
        const meshlet = this.meshlets[index];

        const indicesBuffer = [];
        for (let i of meshlet.indices) {
            indicesBuffer.push(i[0], i[1], i[2]);
        }

        const positions = this.geometry.getAttribute("position").array;
        const vertexBuffer = [];
        for (let v of meshlet.vertices) {
            vertexBuffer.push(positions[v * 3 + 0], positions[v * 3 + 1], positions[v * 3 + 2]);
        }

        const color = "#" + Utils.SimpleHash(`${index}432t34f4${index}${index}`);
        const colorr = new Color(color);

        const mesh = this.GetMeshFromVerticesAndIndices(vertexBuffer, indicesBuffer, colorr);
        return mesh;
    }

    public BuildMeshlet(parent: number) {
        
    }
}